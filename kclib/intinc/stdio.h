/*
 * stdio.h
 *
 *  Created on: Dec 12, 2015
 *      Author: enerccio
 */

#ifndef INTINC_STDIO_H_
#define INTINC_STDIO_H_

#ifdef __cplusplus
extern "C" {
#endif

#include <stdbool.h>
#include <sys/stat.h>

#define __STDOUT 1
#define __STDERR 2
#define __STDIN  3

#define __STDBUFFER_SIZE 2048
#define __BUF_FILES_STARTLEN 16

#define __FLAG_SETPOS    (1<<1)
#define __FLAG_CLOSEABLE (1<<2)
#define __FLAG_HASBUFFER (1<<3)

/**
 * Represents internal buffer that is part of every file
 * and buffers reads/writes if enabled
 */
typedef struct {
	bool	 inited;
	uint8_t  mode;
	bool	 autoalloc;
	uint8_t* buffer;
	size_t   cpos;
	size_t   limit;
} __buffer_t;

/**
 * FILE structure
 */
struct FILE {
	void* 		handle;
	__buffer_t  buffer;
	uint32_t 	fflags;

	int	 		error;
	bool 		eof;
	bool 		closed;
	bool		lastwrite;
	bool 		virtual;
	stat_t* 	stat;
};
typedef struct FILE FILE;

/* _stdio_file.c */
/**
 * Initializes streams subsystem
 */
void __initialize_streams();
/**
 * creates FILE for file descriptor
 */
FILE* __create_filehandle(void* pd);
/**
 * Creates virtual FILE for backing array (used in s* stdio functions)
 */
FILE* __create_vstream(uint8_t* backing_array, size_t n, uint8_t mode);

/* _stdio_buffer.h */
/**
 * Contains all buffered streams
 */
extern FILE** __buffered_handles;
/**
 * Size of __buffered_handles array
 */
extern size_t __buffered_handles_len;
/**
 * Writes the data to the buffer, returns actual number of written data
 */
size_t   __write_to_buffer(__buffer_t* buffer, uint8_t* data, size_t size, bool* flushit);
/**
 * Reads from the buffer, returns actual number of read data
 */
size_t	 __read_from_buffer(__buffer_t* buffer, uint8_t* source, size_t amount);
/**
 * Returns size of used partion of the buffer
 */
size_t	 __buffer_usedsize(__buffer_t* buffer);
/**
 * Returns size of the buffer
 */
size_t	 __buffer_maxsize(__buffer_t* buffer);
/**
 * Returns empty size of the buffer
 */
size_t	 __buffer_freesize(__buffer_t* buffer);
/**
 * Returns head position of the buffer
 */
size_t	 __buffer_fseek(__buffer_t* buffer);
/**
 * Sets the head position of the buffer, if able.
 *
 * Should return new head's position, which can be unchanged if an error happened
 */
size_t	 __buffer_ftell(__buffer_t* buffer, size_t newpos);
/**
 * Returns size and position of data in the buffer
 */
uint8_t* __buffer_get_data(__buffer_t* buffer, size_t* len);
/**
 * Frees internal buffer storage, if it was autogenerated
 */
void     __free_buffer(__buffer_t* buffer);
/**
 * Shifts data in buffer to the left by size amount
 */
void __buffer_shift(__buffer_t* buffer, size_t sa);

#define __IS_CLOSEABLE(flags) ((flags & __FLAG_CLOSEABLE) == __FLAG_CLOSEABLE)
#define __IS_HASBUFFER(flags) ((flags & __FLAG_HASBUFFER) == __FLAG_HASBUFFER)

#ifdef __cplusplus
}
#endif

#endif /* INTINC_STDIO_H_ */
