{"name":"Cthulhu OS","tagline":"x86-64 SMP enabled microkernel hobbyist OS","body":"# Cthulhu OS\r\n\r\n>  “Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn.\r\n> \r\n>  In his house at R'lyeh dead Cthulhu waits dreaming.”\r\n>   ― H.P. Lovecraft, The Call of Cthulhu \r\n\r\n## Information\r\n### What is Cthulhu OS?\r\n\r\nCthulhu OS is minimalistic hobbyist OS. It uses it's own libc (KCLib). Its long term goal is\r\nto support user space applications.\r\n\r\n### What type of kernel does Cthulhu OS use? \r\nCthulhu OS uses Azathoth as its main kernel, which will be microkernel.\r\n\r\n### What is the point of Cthulhu OS?\r\n\r\nThe point is to have fun making a complete OS and then use it as replacement to current OSes. \r\n\r\n### What are Cthulhu OS's requirements\r\n\r\nAt the moment, Cthulhu OS only supports x86-64 architecture. Should work on both Intel and AMD,\r\nhowever, it was only tested on Intel. So far it was only tested on qemu/bochs, I do not recommend\r\nputting it on real hardware yet (not that it can do anything at the moment).\r\n\r\n### What is the status of Cthulhu OS?\r\n\r\nCthulhu OS is under heavy development. So far it has working long mode, paging memory, interrupt handling, symmetrical multiprocessing, interprocessor communication. What needs to be done (and probably more):\r\n\r\n* Loading initrd\r\n* Loading init and daemons\r\n* Userspace mode\r\n* Scheduling, Scheduling with SMP support\r\n* Lots and lots of daemons\r\n* Porting user space programs\r\n\r\n## Building Cthulhu OS\r\n\r\nCompiling Cthulhu OS requires Unix-like environment (was not tested on windows, but will probably require\r\ncygwin).\r\n\r\n### Cthulhu OS cross compiler\r\n\r\nCthulhu OS requires it's own toolchain (x86-64-fhtagn-*). To compile one, these components are required to be \r\npresent at these locations\r\n\r\n* binutils version 2.24 in folder `build-toolchain/sources/binutils/binutils-2.24`\r\n* gcc version 5.1.0 in folder `build-toolchain/sources/gcc/gcc-5.1.0`\r\n* latest version of kclib, will be automatically downloaded from github\r\n\r\nTo build/rebuild toolchain, execute shell script `build-toolchain/create-toolchain.sh` \r\nin `build-toolchain` directory. After the compilation is done, you should have working C environment \r\nin `toolchain` directory and user-space clib in `osroot` directory. \r\n\r\n### Compiling kernel \r\n\r\nSimply invoke `make kernel` in projects root directory. You need to have path to `toolchain/usr/bin` in\r\nyour path for compiler to find `x86_64-fhtagn-gcc` and `x86_64-fhtagn-as`. Your environment has to provide\r\n`nasm` assembler ([http://www.nasm.us](http://www.nasm.us)) and working shell. \r\n\r\nAfter compilation is done, you should have `azathoth.img` in `build` directory.\r\n\r\n### Compiling libnyarlathotep\r\n\r\n`libnyarlathotep` is library used by daemons and other system components. You can create it by invoking \r\n`make nyarlathotep`. \r\n\r\nAfter compilation is done, you should have `libnyarlathotep.a` and `nyarlathotep.h` in `build/libnyarlathotep` directory.\r\n\r\n## Running Cthulhu OS\r\n\r\n### Run environment\r\nCthulhu OS can be run on `qemu` (recommended version 2.5.0, as it was tested on it), `bochs` or real \r\nhardware (not recommended). \r\n\r\nCthulhu OS's kernel Azatoth requires `initrd` in its own file format. You can use provided python script `mkfs.py` to create `initrd`. This script is located in `disk` directory. `mkfs.py` requires `python 2.7`. To use `mkfs.py` you have to provide input directory and output file. Input directory's content will be packed \r\ninto `initrd` output file, which should have name `rlyeh`.  \r\n\r\nCthulhu OS requires `GRUB 2` as its bootloader (since it is mixed 16-32-64bit elf) with `multiboot support`.\r\nIf you do not have `GRUB 2` to create new image, you may create 64MB empty disk file and then use `bspatch` to \r\npatch that empty disk file with `disk.img.patch`. Then you have to mount that image with offset `1048576`. \r\nFor more information check `disk/update_image.sh`.\r\n\r\nSample grub configuration is in directory `boot`, which you can copy into your boot partition.\r\n\r\n### `initrd` contents\r\n`initrd` input directory must contain `init` directory containing `init` init file and directory \r\n`init/daemons` containing daemons to be loaded initially.  \r\n\r\n### Running Cthulhu OS on QEMU\r\nSimply invoke `qemu-system-x86_64 -hdc <yourdiskimagefile> -m 128 -s -smp cores=<numbercores>,threads=<numberthreads>,sockets=<numsockets> -cpu Haswell,+pdpe1gb`\r\n\r\nFor more information check `debug.sh`.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}